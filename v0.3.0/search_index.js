var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Stack-use","page":"Examples","title":"Stack use","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example shows the use of the [ and ] stack push and pop commands.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"simple  = LSystem(Dict(\"F\" => \"F[t+FoF-F]\"), \"F\")\ndrawLSystem(simple,\n   forward     = 50,\n   turn        = 90,\n   iterations  = 6,\n   startingx   = 0,\n   startingy   = -150,\n   filename    = \"simple.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Koch","page":"Examples","title":"Koch","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Koch snowflake (also known as the Koch curve, Koch star, or Koch island) is a fractal curve and one of the earliest fractals to have been described. It is based on the Koch curve, which appeared in a 1904 paper titled \"On a Continuous Curve Without Tangents, Constructible from Elementary Geometry\" by the Swedish mathematician Niels Fabian Helge von Koch.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Wikipedia)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"koch = LSystem(Dict(\"F\" => \"F+F-\"), \"F\") # use turn of 60 degrees\ndrawLSystem(koch,\n   forward     = 5,\n   turn        = 60,\n   iterations  = 6,\n   startingx   = -1800,\n   startingy   = 0,\n   width       = 4000,\n   height      = 4000,\n   filename    = \"koch.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"quadratic_Koch = LSystem(Dict(\"F\" => \"F+F--F+F\"), \"F\") # 4 # 60 degrees\ndrawLSystem(quadratic_Koch,\n   forward     = 10,\n   iterations  = 2,\n   turn        = 90,\n   filename    = \"quadratic_koch.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"koch_snowflake = LSystem(Dict(\"F\" => \"F+F--F+F\"), \"F-F-F\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"quadratic_Koch = LSystem(Dict(\"F\" => \"tF-F+F+FFF-F-F+F\"), \"4F+F+F+F\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Peano","page":"Examples","title":"Peano","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Peano curve is the first example of a space-filling curve to be discovered, by Giuseppe Peano in 1890.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"peano = LSystem(Dict(\"F\" => \"TF+F-F-toF-F+F+F+F-F\"), \"3F\")\ndrawLSystem(peano,\n   turn        = 90,\n   forward     = 20,\n   iterations  = 3,\n   startingx   = -250,\n   filename    = \"peano.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Peano-Gosper","page":"Examples","title":"Peano Gosper","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Peano-Gosper curve is a plane-filling function originally called a \"flowsnake\" by Bill Gosper and Martin Gardner. The name was invented by Benoit Mandelbrot.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"peano_gosper = LSystem(Dict(\n   \"X\" => \"X+YF++YF-tFX--FXFX-YF+\",\n   \"Y\" => \"-FX+YFYF++YF+FX--FX-Y\" ),\n   \"FX\")  # turn 60°\n\ndrawLSystem(peano_gosper,\n   forward             = 10,\n   turn                = 60,\n   iterations          = 4,\n   startingpen         = (0, 0.8, 0.2),\n   startingorientation = -pi/2,\n   startingx           = -200,\n   startingy           =  -50,\n   filename            = \"peano-gosper.pdf\",\n   showpreview         = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#segments","page":"Examples","title":"32 segments","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"thirty_two_segment = LSystem(Dict(\n   \"F\" => \"t-F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+\"),\n   \"F+F+F+F\")\n\ndrawLSystem(thirty_two_segment,\n   forward=5,\n   iterations=2,\n   turn=90,\n   filename=\"32segments.pdf\",\n   showpreview=false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Sierpinski","page":"Examples","title":"Sierpinski","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"sierpinski_triangle = LSystem(Dict(\n   \"F\" => \"G+F+Gt\",\n   \"G\" => \"F-G-F\"),\n   \"G\") # 60°\n\ndrawLSystem(sierpinski_triangle,\n   forward=3,\n   startingx=-400,\n   startingy= -350,\n   turn=60,\n   iterations=8,\n   filename=\"sierpinski-triangle.pdf\",\n   showpreview=false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"square_curve = LSystem(Dict(\n   \"X\" => \"XF-F+F-XF+F+XtF-F+F-X\"),\n   \"F+XF+F+XF\")","category":"page"},{"location":"examples/#Dragon-curves","page":"Examples","title":"Dragon curves","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"dragon_curve = LSystem(Dict(\n   \"F\" => \"F+G+t\",\n   \"G\" => \"-F-G\"),\n   \"F\") #  90 degrees\n\ndrawLSystem(dragon_curve,\n   forward     = 12,\n   turn        = 90,\n   iterations  = 10,\n   filename    = \"dragon_curve.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Hilbert-curves","page":"Examples","title":"Hilbert curves","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"A Hilbert curve (also known as a Hilbert space-filling curve) is a continuous fractal space-filling curve first described by the German mathematician David Hilbert in 1891, as a variant of the space-filling Peano curves discovered by Giuseppe Peano in 1890.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"hilbert_curve = LSystem(Dict(\n   \"L\" => \"+RF-LFL-tFR+\",\n   \"R\" => \"-LF+RFR+FL-\"),\n   \"3L\") # 90°\ndrawLSystem(hilbert_curve,\n   forward     = 25,\n   turn        = 90,\n   iterations  = 4,\n   startingx   = -200,\n   startingy   = -200,\n   filename    = \"hilbert_curve.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"hilbert = LSystem(Dict(\n   \"L\" => \"+RF-LFL-cFR+\",\n   \"R\" => \"-LF+RFR+FL-\"),\n   \"1L\")\n\ndrawLSystem(hilbert,\n   forward     = 12,\n   turn        = 90,\n   iterations  = 6,\n   startingx   = -450,\n   startingy   = -450,\n   filename    = \"hilbert.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"hilbert_curve2 = LSystem(Dict(\n   \"X\" => \"XFYFX+F+YFXFcY-F-XFYFX\",\n   \"Y\" => \"YFXFY-F-XFYFX+F+YFXFY\"),\n   \"2X\")\n\ndrawLSystem(hilbert_curve2,\n   forward     = 10,\n   turn        = 90,\n   iterations  = 4,\n   startingx   = -450,\n   startingy   = -450,\n   filename    = \"hilbert_curve2.pdf\",\n   showpreview = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Plants","page":"Examples","title":"Plants","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"plant = LSystem(Dict(\n   \"F\" => \"F[-F]cF[+F][F]\"),\n   \"F\") # use turn eg 17° or 23°\n\ndrawLSystem(plant,\n   forward             = 7,\n   startingpen         = (0, 0.8, 0.3),\n   startingx           = 0,\n   startingy           =  460,\n   startingorientation = -pi/2,\n   turn                = 23,\n   iterations          = 6,\n   filename            = \"plant.pdf\",\n   showpreview         = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"plant1 = LSystem(Dict(\n   \"F\" => \"FF\",\n   \"X\" => \"F−[[cX]+X]+F[+FX]−X\"),\n   \"1X\")\n\ndrawLSystem(plant1,\n   forward             = 3,\n   turn                = 13,\n   iterations          = 7,\n   startingpen         = (0, 0.8, 0.2),\n   startingorientation = -pi/2,\n   startingx           = -50,\n   startingy           =  450,\n   filename            = \"plant1.pdf\",\n   showpreview         = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"branch  = LSystem(Dict(\n   \"F\" => \"FF-[F+F+Fc]+[+F-F-F][+++F+F-F---][---F+F-F---]\"),\n   \"1FFFF\")\n\ndrawLSystem(branch,\n   forward             = 12,\n   turn                = 20,\n   iterations          = 3,\n   startingpen         = (0, 0.9, 0.2),\n   startingorientation = -pi/2,\n   startingx           = 0,\n   startingy           =  300,\n   filename            = \"branch.pdf\",\n   showpreview         = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/#Penrose-tiling","page":"Examples","title":"Penrose tiling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"penrose = LSystem(Dict(\n   \"X\"  =>  \"PM++QM----YM[-PM----XM]++t\",\n   \"Y\"  => \"+PM--QM[---XM--YM]+t\",\n   \"P\"  => \"-XM++YM[+++PM++QM]-t\",\n   \"Q\"  => \"--PM++++XM[+QM++++YM]--YMt\",\n   \"M\"  => \"F\",\n   \"F\"  => \"\"),\n   \"1[Y]++[Y]++[Y]++[Y]++[Y]\") # 36 degrees\n\ndrawLSystem(penrose,\n   forward             = 25,\n   turn                = 36,\n   iterations          = 7,\n   startingpen         = (.5, 0.8, 0.2),\n   startingorientation = -pi/2,\n   startingx           = 0,\n   startingy           = 0,\n   filename            = \"penrose.pdf\",\n   showpreview         = false)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"#Lindenmayer.jl","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"This is a very simple package that draws LSystems.","category":"page"},{"location":"#Introduction","page":"Lindenmayer.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"An LSystem, or Lindenmayer system, is a set of rules that can define recursive patterns.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"L-systems were introduced and developed in 1968 by Aristid Lindenmayer, a Hungarian theoretical biologist and botanist at the University of Utrecht. Lindenmayer used L-systems to describe the behaviour of plant cells and to model the growth processes of plant development. L-systems have also been used to model the morphology of a variety of organisms and can be used to generate self-similar fractals such as iterated function systems.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"In Lindenmayer.jl you can define an L-System like this:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"sierpinski_triangle = LSystem(Dict(\n    \"F\" => \"G+F+Gt\",\n    \"G\" => \"F-G-F\"),\n    \"G\")","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"(this one has two rules, and an initial state), and draw it like this:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"drawLSystem(sierpinski_triangle, forward=30, turn=60, iterations=6)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"For example:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Lindenmayer\nsierpinski_triangle  = LSystem(Dict(\n    \"F\" => \"G+F+Gt\",\n    \"G\" => \"7F-G-F\"),\n    \"G\")\n\ndrawLSystem(sierpinski_triangle,\n    forward     = 10,\n    turn        = 60,\n    iterations  = 6,\n    startingx   = -300,\n    startingy   = -300,\n    filename    = \"assets/figures/sierpinski_triangle.svg\",\n    showpreview = false)\nnothing # hide","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"(Image: sierpinski triangle)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"In Lindenmayer.jl, an LSystem consists of:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"Rules: a dictionary of transformation rules that replace a character with one or more characters\nInitial state: the initial state for the system (also called \"the Axiom\")\nState: the current evolved state (initially empty, added when the system is evaluated)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"You define an L-System like this:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"sierpinski_triangle = LSystem(Dict(\n    \"F\" => \"G+F+G\",\n    \"G\" => \"F-G-F\"),\n    \"G\")","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"This LSystem has two rules. The first rule says replace \"F\" with \"G+F+Gt\" at every iteration. Rule 2 says replace \"G\" with \"F-G-F\" at every iteration. We start off with an initial state consisting of just a single \"G\".","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"So the system grows like this:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"1: G\n2: (F-G-F)\n3: (G+F+G)-(F-G-F)-(G+F+G)\n4: (F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)\n5: (G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)\n6: (F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-F-G-F-(G+F+G)+F-G-F+(G+F+G)+F-G-F-(G+F+G)-F-G-F-(G+F+G)-F-G-F+(G+F+G)+F-G-F... etc.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"and afer only a few iterations the state consists of thousands of instructions.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"When the LSystem is drawn, the characters in the rule are interpreted as instructions or commands to move a Luxor.jl turtle. So, for example:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"\"F\" and \"G\" both convert to \"Luxor.Forward()\"\n\"+\" rotates clockwise\n\"-\" rotates counterclockwise\n\"5\" specifies a 5 pt thick line\n\"t\" shifts the pen's hue color by 5°","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"and so on. The actual distance moved by \"F\" and \"G\" instructions, the angle of the turn, and other starting parameters, are specified when you evaluate the LSystem.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"You can use any of the unused characters as placeholders or variables. For example, this Hilbert LSystem uses L and R, which don't do anything on their own - but they do insert plenty of \"F\", \"+\", and \"-\" commands.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"hilbert_curve = LSystem(Dict(\n   \"L\" => \"+RF-LFL-FR+\",\n   \"R\" => \"-LF+RFR+FL-\"),\n   \"3L\") # 90°","category":"page"},{"location":"#Drawing-LSystems","page":"Lindenmayer.jl","title":"Drawing LSystems","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"To evaluate and draw the LSystem, use drawLSystem().","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"drawLSystem(LSystem(Dict(\"F\" => \"5F+F--F+Ftt\"), \"F\"),\n    startingx = -400,\n    forward = 4,\n    turn = 80,\n    iterations = 6)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"Keyword options and defaults for drawLSystem are:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"forward              = 15,\nturn                 = 45,\niterations           = 10,\nfilename             = \"/tmp/lsystem.png\",\nwidth                = 800,\nheight               = 800,\nstartingpen          = (0.3, 0.6, 0.8), # starting color RGB\nstartingx            = 0,\nstartingy            = 0,\nstartingorientation  = 0,\nbackgroundcolor      = colorant\"black\",\nasteriskfunction     = (t::Turtle) -> (),\nshowpreview          = true)","category":"page"},{"location":"#Rules","page":"Lindenmayer.jl","title":"Rules","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"The following characters are recognized in LSystem rules.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"Character Function\nF step Forward\nG same as F\nB step backwards\nV same as B\nf half a step forward\nb turn 180° and take half a step forward\nU lift the pen (stop drawing)\nD pen down (start drawing)\n+ turn by angle (degrees!)\n- turn backwards by angle\nr turn randomly by 10° 15° 30° 45° or 60°\nT change the hue at random\nt shift the hue by 5°\nc randomize the saturation\nO choose a random opacity value\nl increase the step size by 1\ns decrease the step size by 1\n9 set line width to 9\n8 set line width to 8\n7 set line width to 7\n6 set line width to 6\n5 set line width to 5\n4 set line width to 4\n3 set line width to 3\n2 set line width to 2\n1 set line width to 1\nn set line width to 0.5\no draw a circle with radius step/4\nq draw a square with side length step/4\n@ turn 5°\n& turn -5°\n[ push the current state on the stack\n] pop the current state off the stack\n* execute the supplied function","category":"page"},{"location":"#Arbitrary-functions","page":"Lindenmayer.jl","title":"Arbitrary functions","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"You can use one external function in an LSystem. Whenever you include the * character in a rule, a function passed to drawLSystem() using the keyword option asteriskfunction will be called. This function accesses the Luxor turtle that's currently busy drawing the LSystem.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"In the following example, the asterisk function f(t::Turtle) passed to drawLSystem() is a bit disruptive. It changes the line width, sets the color, and then draws a group of rescaled pentagons at the turtle's current location and other rotationally symmetrical places. Then, it sets the opacity to 0. The turtle never realises this and never resets it (the t hue-shifting rule uses Luxor.sethue() which doesn't change the current opacity). So all the lines drawn by the turtle are completely transparent, leaving just the pentagons visible.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Lindenmayer, Luxor, Colors\n\nrecursive = LSystem(Dict(\n   \"F\" => \"G+F+G6t\",\n   \"G\" => \"F*-G-F\"),\n   \"G2\")\n\nf(t::Turtle) = begin\n    p = Point(t.xpos, t.ypos)\n    setline(3)\n    setopacity(1)\n    setcolor(HSB(rand(0:359), 0.7, 0.7))\n    for i in 0:4\n        @layer begin\n            rotate(i * deg2rad(72))\n            ngon(p, rescale(distance(p, O), 1, 1000, 3, 20), 5, 0, :stroke)\n        end\n    end\n    setopacity(0.0)\nend\n\ndrawLSystem(recursive,\n    forward=25,\n    turn=72,\n    iterations= 7,\n    startingx = 0,\n    startingy = 0,\n    width=2000,\n    height=2000,\n    backgroundcolor = RGB(0.1, 0.05, 0.15),\n    filename=\"assets/figures/recursive.png\",\n    asteriskfunction = f)\nnothing # hide","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"(Image: stars)","category":"page"},{"location":"#Debugging","page":"Lindenmayer.jl","title":"Debugging","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"To debug:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"ENV[\"JULIA_DEBUG\"] = Lindenmayer","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"LSystem\ndrawLSystem","category":"page"},{"location":"#Lindenmayer.LSystem","page":"Lindenmayer.jl","title":"Lindenmayer.LSystem","text":"A Lindenmayer system is a set of rules that can define recursive patterns. In Lindenmayer.jl, an LSystem consists of:\n\nRules: a dictionary of transformation rules that replace a\ncharacter with one or more characters\nInitial state: the initial state for the system (also\ncalled \"the Axiom\")\nState: the current evolved state (initially empty, added\nwhen the system is evaluated)\n\nYou can define an L-System like this:\n\nusing Lindenmayer\nkoch = LSystem(Dict(\"F\" => \"F+F--F+F\"), \"F\")\n\nExtended help\n\nThis says: there's just one rule; replace \"F\" with \"F+F–F+F\" for each iteration. And start off with an initial state consisting of just a single \"F\".\n\nTo draw the LSystem we use Luxor.jl's Turtle, which interprets the characters in the rule as instructions or commands. For example, \"F\" converts to \"Luxor.Forward()\". \"+\" rotates clockwise, \"-\" rotates counterclockwise, and so on.\n\ndrawLSystem(LSystem(Dict(\"F\" => \"5F+F--F+Ftt\"), \"F\"),\n    startingx = -400,\n    forward = 4,\n    turn = 80,\n    iterations = 6)\n\nKeyword options for drawLSystem include:\n\nforward=15,\nturn=45,\niterations=6,\nfilename=\"/tmp/lsystem.pdf\",\nwidth=1000,\nheight=1000,\nstartingpen=(0.3, 0.6, 0.8), # starting color RGB\nstartingx=0,\nstartingy=0,\nstartingorientation=0,\nshowpreview=true\n\nThe following characters are recognized in LSystem rules.\n\nF - step Forward\n\nG - same as F\n\nB - step backwards\n\nV - same as B\n\nf - half a step forward\n\nb - turn 180° and take half a step forward\n\nU - lift the pen (stop drawing)\n\nD - pen down (start drawing)\n\n+ - turn by angle\n\n- - turn backwards by angle\n\nr - turn randomly by 10° 15° 30° 45° or 60°\n\nT - change the hue at random\n\nt - shift the hue by 5°\n\nc - randomize the saturation\n\nO - choose a random opacity value\n\nl - increase the step size by 1\n\ns - decrease the step size by 1\n\n5 - set line width to 5\n\n4 - set line width to 4\n\n3 - set line width to 3\n\n2 - set line width to 2\n\n1 - set line width to 1\n\nn - set line width to 0.5\n\no - draw a circle with radius step/4\n\nq - draw a square with side length step/4\n\n@ - turn 5°\n\n& - turn -5°\n\n[ - push the current state on the stack\n\n] - pop the current state off the stack\n\n* - execute the arbitrary passed as asteriskfunction() ```\n\n\n\n\n\n","category":"type"},{"location":"#Lindenmayer.drawLSystem","page":"Lindenmayer.jl","title":"Lindenmayer.drawLSystem","text":"drawLSystem(lsystem::LSystem ;\n       # optional settings:\n       forward=15,\n       turn=45,\n       iterations=10,\n       filename=\"lsystem.png\",\n       width=800,\n       height=800,\n       startingpen=(0.3, 0.6, 0.8), # starting color RGB\n       startingx=0,\n       startingy=0,\n       startingorientation=0,\n       showpreview=true,\n       backgroundcolor = colorant\"black\",\n       asteriskfunction = (t::Luxor.Turtle) -> ())\n\nDraw a Lindenmayer system. lsystem is the definition of a L-System (rules followed by initial state).\n\nFor example:\n\nnewsystem = LSystem(Dict(\"F\" => \"AGCFCGAT\", \"G\" => \"CFAGAFC\"), \"F\")\n\nYou can change or add rules like this:\n\nnewsystem.rules[\"F\"] = \"OFO\"\n\nYou can vary the line width using Turtle commands \"1\" ... \"9\" to select the appropriate line width (in points), or \"n\" to choose a narrow 0.5.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Dates # hide\nprintln(\"Documentation built $(Dates.now()) with Julia $(VERSION) on $(Sys.KERNEL)\") # hide","category":"page"}]
}
