var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"Function reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"Function reference","title":"Function reference","text":"Modules = [Lindenmayer]\nOrder   = [:macro, :function, :type, :constant, ]","category":"page"},{"location":"api/#Lindenmayer.drawLSystem-Tuple{LSystem}","page":"Function reference","title":"Lindenmayer.drawLSystem","text":"drawLSystem(lsystem::LSystem ;\n       # optional settings:\n       forward=15,\n       turn=45,\n       iterations=10,\n       filename=\"lsystem.png\",\n       width=800,\n       height=800,\n       startingpen=(0.3, 0.6, 0.8), # starting color RGB\n       startingx=0,\n       startingy=0,\n       startingorientation=0,\n       showpreview=true,\n       backgroundcolor = colorant\"black\",\n       asteriskfunction = (t::Luxor.Turtle) -> ())\n\nDraw a Lindenmayer system. lsystem is the definition of a L-System (rules followed by initial state).\n\nFor example:\n\nnewsystem = LSystem(Dict(\"F\" => \"AGCFCGAT\", \"G\" => \"CFAGAFC\"), \"F\")\n\nYou can change or add rules like this:\n\nnewsystem.rules[\"F\"] = \"OFO\"\n\nYou can vary the line width using Turtle commands \"1\" ... \"9\" to select the appropriate line width (in points), or \"n\" to choose a narrow 0.5.\n\n\n\n\n\n","category":"method"},{"location":"api/#Lindenmayer.evaluate","page":"Function reference","title":"Lindenmayer.evaluate","text":"evaluate(ls::LSystem, iterations=1)\n\nApply the rules in the LSystem to the initial state repeatedly. The ls.state array holds the result.\n\n\n\n\n\n","category":"function"},{"location":"api/#Lindenmayer.render-Tuple{LSystem, Luxor.Turtle, Any, Any}","page":"Function reference","title":"Lindenmayer.render","text":"render(ls::LSystem, t::Turtle, stepdistance, rotangle;\n    asteriskfunction=(t) -> ())\n\nOnce the LSystem has been evaluated, the state (in LSystem.state) can be drawn.\n\nls is the LSystem to be rendered\nt is a Luxor turtle\nstepdistance is the Forward distance\nrotangle is the Turn angle\n\n\n\n\n\n","category":"method"},{"location":"api/#Lindenmayer.LSystem","page":"Function reference","title":"Lindenmayer.LSystem","text":"A Lindenmayer system is a set of rules that can build recursive patterns. In Lindenmayer.jl, an LSystem structure consists of:\n\nRules: a set of search and replace strings\nSeed: a string that defines the initial state for the system\nState: the current state (initially empty, added when the system is evaluated)\n\nYou can define an L-System like this:\n\nusing Lindenmayer\nkoch = LSystem([\"F\" => \"F+F--F+F\"], \"F\")\n\nThis says: there's just one rule; search for \"F\" and replace with \"F+F–F+F\" for each iteration. The starting \"seed\" is the initial state consisting of just a single \"F\".\n\nExtended help\n\nTo draw the LSystem we use Luxor.jl's Turtle, which interprets the characters in the rule as instructions or commands. For example, \"F\" converts to Luxor.Forward()`, \"+\" rotates clockwise, \"-\" rotates counterclockwise, and so on.\n\ndrawLSystem(LSystem([\"F\" => \"5F+F--F+Ftt\"], \"F\"),\n    startingx = -400,\n    forward = 4,\n    turn = 80,\n    iterations = 6)\n\nKeyword options for drawLSystem include:\n\nforward=15,\nturn=45,\niterations=6,\nfilename=\"/tmp/lsystem.pdf\",\nwidth=1000,\nheight=1000,\nstartingpen=(0.3, 0.6, 0.8), # starting color RGB\nstartingx=0,\nstartingy=0,\nstartingorientation=0,\nshowpreview=true\n\nThe following characters are recognized in LSystem rules.\n\nF - step Forward\n\nG - same as F\n\nB - step backwards\n\nV - same as B\n\nf - half a step forward\n\nb - turn 180° and take half a step forward\n\nU - lift the pen (stop drawing)\n\nD - pen down (start drawing)\n\n+ - turn by angle\n\n- - turn backwards by angle\n\nr - turn randomly by 10° 15° 30° 45° or 60°\n\nT - change the hue at random\n\nt - shift the hue by 5°\n\nc - randomize the saturation\n\nO - choose a random opacity value\n\nl - increase the step size by 1\n\ns - decrease the step size by 1\n\n5 - set line width to 5\n\n4 - set line width to 4\n\n3 - set line width to 3\n\n2 - set line width to 2\n\n1 - set line width to 1\n\nn - set line width to 0.5\n\no - draw a circle with radius step/4\n\nq - draw a square with side length step/4\n\n@ - turn 5°\n\n& - turn -5°\n\n[ - push the current state on the stack\n\n] - pop the current state off the stack\n\n* - execute the arbitrary function passed as asteriskfunction() ```\n\n\n\n\n\n","category":"type"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Stack-use","page":"Examples","title":"Stack use","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example shows the use of the [ and ] stack push and pop commands.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nsimple = LSystem([\"F\" => \"F[t+FoF-F]\"], \"F\")\ndrawLSystem(simple,\n   forward=40,\n   turn=90,\n   iterations=6,\n   startingx=0,\n   startingy=-100)","category":"page"},{"location":"examples/#Koch","page":"Examples","title":"Koch","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Koch snowflake (also known as the Koch curve, Koch star, or Koch island) is a fractal curve and one of the earliest fractals to have been described. It is based on the Koch curve, which appeared in a 1904 paper titled \"On a Continuous Curve Without Tangents, Constructible from Elementary Geometry\" by the Swedish mathematician Niels Fabian Helge von Koch.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Wikipedia)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nkoch = LSystem([\"F\" => \"F-F++F-F\"], \"3F\") # use turn of 60°\ndrawLSystem(koch,\n   forward     = 8,\n   turn        = 60,\n   iterations  = 4,\n   startingx   = -300,\n   startingy   = 0,\n   width       = 800,\n   height      = 500,\n   filename    = :png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\n# turn angle = 90°\nquadratic_koch = LSystem([\n   \"F\" => \"F+F-F-FFF+F+F-F\"\n   ], \n   \"8F+F+F+F\")\ndrawLSystem(quadratic_koch,\n   forward=20,\n   iterations=2,\n   startingx=-220,\n   startingy=-75,\n   startingpen=(0, 1, 1),\n   width=800,\n   height=800,\n   turn=90,\n   filename=:png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nkoch_snowflake = LSystem([\"F\" => \"F-F+F+F-F\"], \"2F\")\ndrawLSystem(koch_snowflake,\n   forward=3,\n   iterations=5,\n   startingx = -350,\n   startingy = 150,\n   turn=90,\n   height=500,\n   filename=:svg)","category":"page"},{"location":"examples/#Peano","page":"Examples","title":"Peano","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Peano curve is the first example of a space-filling curve to be discovered, by Giuseppe Peano in 1890.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\npeano = LSystem([\"F\" => \"TF+F-F-toF-F+F+F+F-F\"], \"3F\")\ndrawLSystem(peano,\n   forward=25,\n   turn=90,\n   iterations=3,\n   startingx=-350,\n   filename=:png)","category":"page"},{"location":"examples/#Peano-Gosper","page":"Examples","title":"Peano Gosper","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Peano-Gosper curve is a plane-filling function originally called a \"flowsnake\" by Bill Gosper and Martin Gardner. The name was invented by Benoit Mandelbrot.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example uses t to advance the hue by 5° each step.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\npeano_gosper = LSystem([\n      \"X\" => \"X+YF++YF-tFX--FXFX-YF+\",\n      \"Y\" => \"-FX+YFYF++YF+FX--FX-Y\"],\n   \"4FX\")  # turn 60°\n\ndrawLSystem(peano_gosper,\n   forward=12,\n   turn=60,\n   iterations=4,\n   startingpen=(0, 0.8, 0.2),\n   startingorientation = -π/2,\n   startingx=-300,\n   startingy=-100,\n   filename=:png)","category":"page"},{"location":"examples/#32-segments","page":"Examples","title":"32 segments","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\n\nthirty_two_segment = LSystem([\n   \"F\" => \"t-F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+\"],\n   \"2F+F+F+F\")\n\ndrawLSystem(thirty_two_segment,\n   forward=5,\n   iterations=2,\n   startingx = -150,\n   startingy = -150,\n   turn=90,\n   filename=:png)","category":"page"},{"location":"examples/#Sierpinski","page":"Examples","title":"Sierpinski","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nsierpinski_triangle = LSystem([\n      \"F\" => \"G+F+Gt\",\n      \"G\" => \"F-G-F\"],\n   \"2G\") # 60°\n\ndrawLSystem(sierpinski_triangle,\n   forward=6,\n   startingx=-380,\n   startingy=350,\n   turn=60,\n   iterations=7,\n   filename=:png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nsquare_curve = LSystem([\n   \"X\" => \"XF-F+F-XF+F+XtF-F+F-X\"],\n   \"F +XF +F +XF +F +XF\")\n\ndrawLSystem(square_curve,\n   forward=0.8,\n   startingx=0,\n   startingy=-330,\n   turn=60,\n   iterations=5,\n   height = 800, \n   filename=:png)","category":"page"},{"location":"examples/#Dragon-curves","page":"Examples","title":"Dragon curves","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\ndragon_curve = LSystem([\n      \"F\" => \"F+G+t\",\n      \"G\" => \"-F-G\"],\n   \"3F\") #  90 degrees\n\ndrawLSystem(dragon_curve,\n   forward=14,\n   turn=90,\n   startingx = -70,\n   startingy = -180,\n   iterations=10,\n   filename=:png)","category":"page"},{"location":"examples/#Hilbert-curves","page":"Examples","title":"Hilbert curves","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"A Hilbert curve (also known as a Hilbert space-filling curve) is a continuous fractal space-filling curve first described by the German mathematician David Hilbert in 1891, as a variant of the space-filling Peano curves discovered by Giuseppe Peano in 1890.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nhilbert_curve = LSystem([\n      \"L\" => \"+RF-LFL-tFR+\",\n      \"R\" => \"-LF+RFR+FL-\"],\n   \"4L\") # 90°\n\ndrawLSystem(hilbert_curve,\n   forward=30,\n   turn=90,\n   iterations=4,\n   startingx=-220,\n   startingy=-220,\n   filename=:png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nhilbert = LSystem([\n      \"L\" => \"+RF-LFL-FR+\",\n      \"R\" => \"-LF+RFR+FL-t\"],\n   \"9L\")\n\ndrawLSystem(hilbert,\n   forward=20,\n   turn=90,\n   iterations=5,\n   startingx=-320,\n   startingy=-320,\n   filename=:png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nhilbert_curve2 = LSystem([\n      \"X\" => \"XFYFX+F+YFXFY-F-XFYFX\",\n      \"Y\" => \"YFXFY-F-XFYFX+F+YFXFY\"\n   ],\n   \"2X\")\n\ndrawLSystem(hilbert_curve2,\n   forward=8,\n   turn=90,\n   iterations=4,\n   startingx=-320,\n   startingy=-320,\n   filename=:png)","category":"page"},{"location":"examples/#Plants","page":"Examples","title":"Plants","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\n\nplant = LSystem([\n      \"F\" => \"F[-F]cF[+F][F]\"],\n   \"F\") # use turn eg 17° or 23°\n\ndrawLSystem(plant,\n   forward=7,\n   startingpen=(0, 0.8, 0.3),\n   startingx=0,\n   startingy=460,\n   startingorientation=-pi / 2,\n   turn=23,\n   iterations=6,\n   height=1000,\n   filename=:png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nplant1 = LSystem([\n      \"F\" => \"FF\",\n      \"X\" => \"F−[[cX]+X]+F[+FX]−X\"\n   ],\n   \"&1X\")\n\ndrawLSystem(plant1,\n   forward=3,\n   turn=13,\n   iterations=7,\n   startingpen=(0, 0.8, 0.2),\n   startingorientation=-pi / 2,\n   startingx=-50,\n   startingy=450,\n   width=800,\n   height=1000,\n   filename=:png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\nbranch = LSystem([\n      \"F\" => \"FF-[F+F+Fc]+[+F-F-F][+++F+F-F---][---F+F-F---]\"\n   ],\n   \"1FFFF\")\n\ndrawLSystem(branch,\n   forward=15,\n   turn=20,\n   iterations=3,\n   startingpen=(0, 0.9, 0.2),\n   startingorientation= -π / 2,\n   startingx=0,\n   startingy=400,\n   filename=:png)","category":"page"},{"location":"examples/#Penrose-tiling","page":"Examples","title":"Penrose tiling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Lindenmayer, Luxor, Colors # hide\npenrose = LSystem([\n      \"X\" => \"PM++QM----YM[-PM----XM]++\",\n      \"Y\" => \"+PM--QM[---XM--YM]+\",\n      \"P\" => \"-XM++YM[+++PM++QM]-\",\n      \"Q\" => \"t--PM++++XM[+QM++++YM]--YM\",\n      \"M\" => \"F\",\n      \"F\" => \"\"\n   ],\n   \"1[Y]++[Y]++[Y]++[Y]++[Y]\") # 36 degrees\n\ndrawLSystem(penrose,\n   forward=20,\n   turn=36,\n   iterations=7,\n   startingpen=(0.5, 0.8, 0.2),\n   startingorientation=-π / 2,\n   startingx=0,\n   startingy=0,\n   filename=:png)","category":"page"},{"location":"#Lindenmayer.jl","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"This is a simple package that can make LSystems. It uses Luxor.jl to draw them.","category":"page"},{"location":"#Introduction","page":"Lindenmayer.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"An LSystem, or Lindenmayer system, is a set of rules that can define recursive patterns.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"These were introduced and developed in 1968 by Aristid Lindenmayer, a Hungarian theoretical biologist and botanist at the University of Utrecht. Lindenmayer used LSystems to describe the behaviour of plant cells and to model the growth processes of plant development. LSystems have also been used to model the morphology of a variety of organisms and can be used to generate self-similar fractals such as iterated function systems.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"In Lindenmayer.jl you can define an LSystem like this:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"sierpinski_triangle = LSystem([\n        \"F\" => \"G+F+Gt\",\n        \"G\" => \"F-G-F\"],\n    \"G\")","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"This one has two rules, and an initial state. You can draw it using the drawLSystem() function.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"For example:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Lindenmayer\nsierpinski_triangle  = LSystem([\n        \"F\" => \"G+F+Gt\",\n        \"G\" => \"7F-G-F\"\n    ],\n    \"G\")\n\ndrawLSystem(sierpinski_triangle,\n    forward     = 10,\n    turn        = 60,\n    iterations  = 6,\n    startingx   = -300,\n    startingy   = -300,\n    filename    = :svg)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"In Lindenmayer.jl, an LSystem consists of:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"Rules: one or more search and replace rules in a Vector. Each rule replaces a single-character string with a string of one or more characters\nInitial state: the initial seed state for the system (sometimes called \"the Axiom\")\nState: the current evolved state (initially empty, added when the system is evaluated)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"The sierpinski_triangle LSystem has two rules. The first rule says replace \"F\" with \"G+F+Gt\" at every iteration. Rule 2 says replace \"G\" with \"F-G-F\" at every iteration. We start off with an initial state consisting of just a single \"G\".","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"So the system State grows like this:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"1: G\n2: (F-G-F) # after applying rule 2\n3: (G+F+G)-(F-G-F)-(G+F+G) # after applying rule 1\n4: (F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)\n5: (G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)\n6: (F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)-(G+F+G)-(F-G-F)-(G+F+G)-(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-(F-G-F)-(G+F+G)+(F-G-F)+(G+F+G)+(F-G-F)+(G+F+G)-F-G-F-(G+F+G)+F-G-F+(G+F+G)+F-G-F-(G+F+G)-F-G-F-(G+F+G)-F-G-F+(G+F+G)+F-G-F... etc.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"and, afer only a few iterations, the state consists of thousands of instructions.","category":"page"},{"location":"#Drawing-the-LSystem","page":"Lindenmayer.jl","title":"Drawing the LSystem","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"Use drawLSystem() to evaluate and draw the LSystem. The characters in the rule are interpreted as instructions to control a Luxor.jl turtle.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"\"F\" and \"G\" both convert to Luxor.Forward()\n\"+\" rotates the turtle clockwise\n\"-\" rotates the turtle counterclockwise\n\"5\" specifies a 5 pt thick line\n\"t\" shifts the pen's hue color by 5°","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"The actual distance moved by \"F\" and \"G\" instructions, the angle of the turn, and other starting parameters, are specified when you evaluate the LSystem.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"The following characters are turtle-ese, referring to existing instructions: ","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"& * + - 1 2 3 4 5 6 7 8 9 @ \nB D F G O T U V [ ] \nb c f l n o q r s t","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"You can use the remaining letters as placeholders or variables as you like. For example, the following Hilbert LSystem uses L and R, which don't do anything on their own - but they do expand to use plenty of \"F\", \"+\", and \"-\" rules.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"hilbert_curve = LSystem([\n   \"L\" => \"+RF-LFL-FR+\",\n   \"R\" => \"-LF+RFR+FL-\"\n   ],\n   \"3L\") # 90°","category":"page"},{"location":"#Drawing-LSystems","page":"Lindenmayer.jl","title":"Drawing LSystems","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"To evaluate and draw the LSystem, use drawLSystem(). ","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"drawLSystem(LSystem([\"F\" => \"5F+F--F+Ftt\"], \"F\"),\n    startingx = -400,\n    forward = 4,\n    turn = 80,\n    iterations = 6)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"Keyword options and defaults for drawLSystem are:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"forward              = 15,\nturn                 = 45,\niterations           = 10,\nfilename             = \"/tmp/lsystem.png\",\nwidth                = 800,\nheight               = 800,\nstartingpen          = (0.3, 0.6, 0.8), # starting color in RGB\nstartingx            = 0,\nstartingy            = 0,\nstartingorientation  = 0,\nbackgroundcolor      = colorant\"black\",\nasteriskfunction     = (t::Turtle) -> (),\nshowpreview          = true","category":"page"},{"location":"#Rules","page":"Lindenmayer.jl","title":"Rules","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"The following characters are recognized in LSystem rules.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"Character in rule Function\n- turn backwards by angle\n[ push the current state on the stack\n] pop the current state off the stack\n@ turn 5°\n* execute the supplied function\n& turn -5°\n+ turn by angle (degrees!)\n1 set line width to 1\n2 set line width to 2\n3 set line width to 3\n4 set line width to 4\n5 set line width to 5\n6 set line width to 6\n7 set line width to 7\n8 set line width to 8\n9 set line width to 9\nB step backwards\nb turn 180° and take half a step forward\nc randomize the saturation\nD pen down (start drawing)\nf half a step forward\nF step Forward\nG same as F\nl increase the step size by 1\nn set line width to 0.5\nO choose a random opacity value\no draw a circle with radius step/4\nq draw a square with side length step/4\nr turn randomly by 10° 15° 30° 45° or 60°\ns decrease the step size by 1\nT change the hue at random\nt shift the hue by 5°\nU lift the pen (stop drawing)\nV same as B","category":"page"},{"location":"#Arbitrary-functions","page":"Lindenmayer.jl","title":"Arbitrary functions","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"You can define one external function in an LSystem. Whenever you include the * character in a rule, a function passed to drawLSystem() using the keyword option asteriskfunction will be called. This function accesses the Luxor turtle that's currently busy drawing the LSystem.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"In the next example, a circle is drawn whenever the evaluation encounters a *. The advantage of using this (rather than the o) is that the radius of the circle can be made to vary with the distance from the center.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Lindenmayer, Luxor, Colors # hide\n\nphyllotax = LSystem([\"A\" => \"A+[UFD*]ll\"], \"A\")\n\ncounter = 0\nf(t::Turtle) = begin\n   global counter\n   fontsize(22)\n   d = distance(O, Point(t.xpos, t.ypos))\n   sethue(HSL(mod(counter, 360), 0.8, 0.5))\n   circle(Point(t.xpos, t.ypos), rescale(d, 1, 200, 3, 15), :fill)\n   counter += 1\nend\n\ndrawLSystem(phyllotax,\n   forward=65,\n   turn=137.5,\n   iterations=200,\n   startingx=0,\n   startingy=0,\n   width=1000,\n   height=1000,\n   filename=:png,\n   asteriskfunction=f\n)","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"In the next example, the asterisk function f(t::Turtle) passed to drawLSystem() is a bit disruptive. It changes the line width, sets the color, and then draws a group of rescaled pentagons at the turtle's current location and other rotationally symmetrical places. Then, it sets the opacity to 0. The turtle never realises this and never resets it (the t hue-shifting rule uses Luxor.sethue() which doesn't change the current opacity). So all the lines drawn by the turtle are completely transparent, leaving just the pentagons visible.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Lindenmayer, Luxor, Colors\n\nrecursive = LSystem([\n   \"F\" => \"G+F+G6t\",\n   \"G\" => \"F*-G-F\"\n    ],\n   \"G2\")\n\nf(t::Turtle) = begin\n    p = Point(t.xpos, t.ypos)\n    setline(3)\n    setopacity(1)\n    setcolor(HSB(rand(0:359), 0.7, 0.7))\n    for i in 0:4\n        @layer begin\n            rotate(i * deg2rad(72))\n            ngon(p, rescale(distance(p, O), 1, 1000, 3, 20), 5, 0, :stroke)\n        end\n    end\n    setopacity(0.0)\nend\n\ndrawLSystem(recursive,\n    forward=10,\n    turn=72,\n    iterations= 7,\n    startingx = 0,\n    startingy = 0,\n    width=800,\n    height=1000,\n    backgroundcolor = colorant\"black\",\n    filename=:png,\n    asteriskfunction = f)","category":"page"},{"location":"#Custom-evaluations","page":"Lindenmayer.jl","title":"Custom evaluations","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"drawLSystem() has plenty of options, but you might prefer to use an LSystem in a regular Luxor workflow. To do this, use the Lindenmayer.evaluate() and Lindenmayer.render() functions separately. ","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"After Lindenmayer.evaluate() has run, the LSystem struct has all the turtle operations stored (as UInt16 integers) in the .state field. Lindenmayer.render() can convert these to Luxor turtle instructions.","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Lindenmayer\nusing Luxor\nusing Colors\n\n@drawsvg begin\n   background(\"black\")\n   setlinecap(\"round\")\n   penrose = LSystem(Dict(\"X\" => \"PM++QM----YM[-PM----XM]++t\",\n         \"Y\" => \"+PM--QM[---XM--YM]+t\",\n         \"P\" => \"-XM++YM[+++PM++QM]-t\",\n         \"Q\" => \"--PM++++XM[+QM++++YM]--YMt\",\n         \"M\" => \"F\",\n         \"F\" => \"\"),\n      \"[Y]++[Y]++[Y]++[Y]++[Y]\")\n\n   # evaluate the LSystem\n   Lindenmayer.evaluate(penrose, 5)\n\n   # create a turtle\n   🐢 = Turtle()\n   Penwidth(🐢, 5)\n   Pencolor(🐢, \"cyan\")\n\n   # render the LSystem's evaluation to the drawing; \n   # forward step is 45\n   # turn angle is 36°\n   Lindenmayer.render(penrose, 🐢, 45, 36)\nend 800 800","category":"page"},{"location":"#Debugging","page":"Lindenmayer.jl","title":"Debugging","text":"","category":"section"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"To debug:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"ENV[\"JULIA_DEBUG\"] = Lindenmayer","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"To stop debugging:","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"ENV[\"JULIA_DEBUG\"] = nothing","category":"page"},{"location":"","page":"Lindenmayer.jl","title":"Lindenmayer.jl","text":"using Dates # hide\nprintln(\"Documentation built $(Dates.now()) with Julia $(VERSION) on $(Sys.KERNEL)\") # hide","category":"page"}]
}
